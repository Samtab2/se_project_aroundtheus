!function(){"use strict";class e{constructor(e,t,s,r,i){this._handleImageClick=s,this._cardSelector=t,this._link=e.link,this._name=e.name,this._handleLikeClick=i,this._handleDeleteClick=r,this._id=e._id,this._isLiked=e.isLiked}getId(){return this._id}getIsLiked(){return this._isLiked}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}toggleLikeCard(e){this._isLiked=e,this.renderLikeCard()}renderLikeCard(){this._isLiked?this._likeButton.classList.add("cards__like-button_active"):this._likeButton.classList.remove("cards__like-button_active")}deleteCard(){this._cardElement.remove(),this._cardElement=null}getCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".list").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".cards__image"),this._likeButton=this._cardElement.querySelector(".cards__like-button"),this._trashButton=this._cardElement.querySelector(".cards__trash-button"),this._cardTitleEl=this._cardElement.querySelector(".cards__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._setEventListeners(),this.renderLikeCard(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity=e=>{if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)};_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableSubmitButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}toggleButtonState(){this._hasInvalidInput()?this._disableSubmitButton():this._enableSubmitButton()}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this.toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}disableSubmitButton(){this._disableSubmitButton()}resetForm(){this._form.reset()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._renderer=r,this._container=document.querySelector(t),this._items=s}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){this._modalElement=document.querySelector(e),this._handleModalEscape=this._handleModalEscape.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleModalEscape)}close=()=>{this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleModalEscape)};_handleModalEscape=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton=this._modalElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",this.close),this._modalElement.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class i extends r{constructor(e,t,s){let{formSelector:r,submitButtonSelector:i}=s;super(e),this._form=this._modalElement.querySelector(r),this._formSubmit=t,this._inputList=Array.from(this._form?this._form.querySelectorAll(".modal__input"):[]),this._button=this._modalElement.querySelector(i),this._originalButtonText=this._button.textContent}renderingSaving(e){this._button.textContent=e?"Saving...":this._originalButtonText}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setFormValue(e,t){const s=this._form.querySelector(`[name="${e}"]`);s&&(s.value=t)}setEventListeners(){super.setEventListeners(),this._form&&this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._formSubmit(t,e)}))}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__error_visible"},o=document.querySelector(".profile"),a=o.querySelector(".profile__edit-button"),l=o.querySelector(".profile__add-button"),d=document.querySelector("#profile-edit-modal"),c=Array.from(d.querySelectorAll(".modal__input")),h=Array.from(document.querySelectorAll(n.formSelector)),_={resetForm(){h.forEach((e=>{e.reset()}))}},u=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){const e={};return e.name=this._nameElement.textContent,e.description=this._descriptionElement.textContent,e}setUserInfo(e){this._nameElement.textContent=e.name,this._descriptionElement.textContent=e.description}setUserAvatar(e){this._avatar.src=e}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),m=document.querySelector(".profile__image"),p=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}editUserInfo(e){let{title:t,description:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}changeAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.url})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{"Content-Type":"application/json",authorization:"084a20b4-0f85-402b-8b18-0788371f1b7e"}});let E;function v(e,t){g.open({name:e,link:t})}Promise.all([p.getUserInfo(),p.getInitialCards()]).then((e=>{let[t,r]=e;u.setUserInfo({name:t.name,description:t.about}),u.setUserAvatar(t.avatar),E=new s({items:r,renderer:e=>{const t=b(e);E.addItem(t)}},".cards__list"),E.renderItems()})).catch(console.error),h.forEach((e=>{const s=new t(n,e),r=e.getAttribute("name");s.enableValidation(),_[r]=s}));const g=new class extends r{constructor(e){super(e),this._previewImage=this._modalElement.querySelector(".modal__image"),this._previewTitle=this._modalElement.querySelector(".modal__image-title")}open(e){let{name:t,link:s}=e;this._previewImage.setAttribute("src",s),this._previewImage.setAttribute("alt",t),this._previewTitle.textContent=t,super.open()}}("#preview__image-modal");function b(t){return new e(t,"#card-template",v,C,y).getCard()}const S=new i("#profile-edit-modal",(function(e){S.renderingSaving(!0),p.editUserInfo(e).then((e=>{u.setUserInfo({name:e.name,description:e.about}),S.close()})).catch(console.error).finally((()=>{S.renderingSaving(!1)}))}),n),f=new i("#add-card-modal",(function(e){f.renderingSaving(!0);const t={name:e.title,link:e.url};p.addCard(t).then((e=>{const t=b(e);_.resetForm(),_["add-card-form"].resetValidation(),E.addItem(t),f.close()})).catch(console.error).finally((()=>{f.renderingSaving(!1)}))}),n),k=new i("#modal-change-picture",(function(e){k.renderingSaving(!0),p.changeAvatar({url:e.url}).then((e=>{u.setUserAvatar(e.avatar),k.close()})).catch(console.error).finally((()=>{k.renderingSaving(!1)}))}),n),L=new class extends r{constructor(e,t){let{submitButtonSelector:s,formSelector:r}=t;super(e),this._button=this._modalElement.querySelector(s),this._callback=null,this._form=this._modalElement.querySelector(r),this._originalButtonText=this._button.textContent}setCallback(e){this._callback=e}renderingLoading(e){this._button.textContent=e?"Deleting...":this._originalButtonText}setEventListeners(){super.setEventListeners(),this._form&&this._form.addEventListener("submit",(e=>{e.preventDefault(),this._callback&&this._callback(e)}))}}("#delete-confirmation-modal",{submitButtonSelector:".modal__button",formSelector:".modal__form"});function C(e){L.open(),L.setCallback((()=>{L.renderingLoading(!0),p.deleteCard(e.getId()).then((()=>{e.deleteCard(),L.close()})).catch((e=>{console.error(e)})).finally((()=>{L.renderingLoading(!1)}))}))}function y(e){const t=e.getId(),s=e.getIsLiked();p.likeCard(t,s).then((t=>e.toggleLikeCard(t.isLiked))).catch(console.error)}a.addEventListener("click",(()=>{const e=u.getUserInfo();c[0].value=e.name,c[1].value=e.description,S.open()})),l.addEventListener("click",(()=>{f.open()})),S.setEventListeners(),f.setEventListeners(),g.setEventListeners(),k.setEventListeners(),L.setEventListeners(),m.addEventListener("click",(()=>{k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,